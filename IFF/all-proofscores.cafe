--> I) Base case
--> init
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op k : -> Key .
	op r : -> Rand .
	red inv1(init,a1,a2,a3,k,r) .
close

--> II) Induction cases
--> 1. fkchm1(p,r1,r2,r3)
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkchm1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkchm1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

--> 2. fkrem1(p,r1,r2,r3)
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = a2 .
  eq k = k(intruder) .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = a2 .
  eq (k = k(intruder)) = false .
	eq a2 = intruder .
  eq enc(k,r,intruder) \in ciphers(nw(p)) = true .
  red inv2(p,k,r)
    implies inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = a2 .
  eq (k = k(intruder)) = false .
  eq a2 = intruder .
  eq enc(k,r,intruder) \in ciphers(nw(p)) = false .
  red lm1(r3,enc(k,r,intruder),ciphers(nw(p)))
      implies inv1(p,a1,a2,a3,k,r)
      implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = a2 .
  eq (k = k(intruder)) = false .
  eq (a2 = intruder) = false .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

-- long term
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq r(r3) = r .
  eq (p(r3) = a2) = false .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq k(r3) = k .
  eq (r(r3) = r) = false .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  eq r3 \in ciphers(nw(p)) = true .
  eq a1 = intruder .
  eq r1 = a2 .
  eq r2 = a3 .
  eq (k(r3) = k) = false .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close


open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  	eq r3 \in ciphers(nw(p)) = true .
  	eq a1 = intruder .
  	eq r1 = a2 .
  	eq (r2 = a3) = false .
  	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  	eq r3 \in ciphers(nw(p)) = true .
  	eq a1 = intruder .
  	eq (r1 = a2) = false .
  	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  	eq r3 \in ciphers(nw(p)) = true .
  	eq (a1 = intruder) = false .
  	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
  	eq r3 \in ciphers(nw(p)) = false .
  red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem1(p,r1,r2,r3),a1,a2,a3,k,r) .
close

--> 3. fkrem2(p,r1,r2,r3)
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	eq a2 = intruder .
	eq k(intruder) = k .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem2(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	eq a2 = intruder .
	eq (k(intruder) = k) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem2(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	eq (a2 = intruder) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem2(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(fkrem2(p,r1,r2,r3),a1,a2,a3,k,r) .
close

--> 4. sdchm(p,r1,r2,r3)
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(p)) = true .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdchm(p,r1,r2,r3),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(p)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdchm(p,r1,r2,r3),a1,a2,a3,k,r) .
close

--> 5. sdrem(p,r1,r2,r3)
open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq a3 = src(r2) .
  	eq k = k(dst(r2)) .
  	eq r = r(r2) .
  	eq a2 = dst(r2) .

  	eq dst(r2) = intruder .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq a3 = src(r2) .
  	eq k = k(dst(r2)) .
  	eq r = r(r2) .
  	eq a2 = dst(r2) .

  	eq (dst(r2) = intruder) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq a3 = src(r2) .
  	eq k = k(dst(r2)) .
  	eq r = r(r2) .
  	eq (a2 = dst(r2)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq a3 = src(r2) .
  	eq k = k(dst(r2)) .
  	eq (r = r(r2)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq a3 = src(r2) .
  	eq (k = k(dst(r2))) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq a1 = dst(r2) .
  	eq (a3 = src(r2)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq r1 = dst(r2) .

  	eq (a1 = dst(r2)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = true .
	eq (r1 = dst(r2)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = true .
	eq (r2 \in nw(p)) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

open IFF .
  :id(iff)
	op a1 : -> Prin .
	op a2 : -> Prin .
	op a3 : -> Prin .
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Msg .
	eq chm?(r2) = false .
	red inv1(p,a1,a2,a3,k,r) implies inv1(sdrem(p,r1,r2),a1,a2,a3,k,r) .
close

--> I) Base case
--> init
open IFF .
  :id(iff)
	op k : -> Key .
	op r : -> Rand .
	red inv2(init,k,r) .
close

--> II) Induction cases
--> 1. fkchm1(p,r1,r2,r3)
open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	red inv2(p,k,r) implies inv2(fkchm1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = false .
	red inv2(p,k,r) implies inv2(fkchm1(p,r1,r2,r3),k,r) .
close

--> 2. fkrem1(p,r1,r2,r3)
open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = intruder .
  eq r3 \in ciphers(nw(p)) = true .
  red lm1(r3,enc(k,r,intruder),ciphers(nw(p)))
  implies inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = intruder .
  eq r3 \in ciphers(nw(p)) = false .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq (p(r3) = intruder) = false .
  eq r3 \in ciphers(nw(p)) = true .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq (p(r3) = intruder) = false .
  eq r3 \in ciphers(nw(p)) = false .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq (r(r3) = r) = false .
  eq r3 \in ciphers(nw(p)) = true .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq (r(r3) = r) = false .
  eq r3 \in ciphers(nw(p)) = false .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq (k(r3) = k) = false .
  eq r3 \in ciphers(nw(p)) = true .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
  ops r1 r2 : -> Prin .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq (k(r3) = k) = false .
  eq r3 \in ciphers(nw(p)) = false .
  red inv2(p,k,r) implies inv2(fkrem1(p,r1,r2,r3),k,r) .
close

--> 3. fkrem2(p,r1,r2,r3)
open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	eq k(intruder) = k .
	red inv2(p,k,r) implies inv2(fkrem2(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = true .
	eq (k(intruder) = k) = false .
	red inv2(p,k,r) implies inv2(fkrem2(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(p))) = false .
	red inv2(p,k,r) implies inv2(fkrem2(p,r1,r2,r3),k,r) .
close

--> 4. sdchm(p,r1,r2,r3)
open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(p)) = true .
	red inv2(p,k,r) implies inv2(sdchm(p,r1,r2,r3),k,r) .
close

open IFF .
  :id(iff)
	op p : -> Protocol .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(p)) = false .
	red inv2(p,k,r) implies inv2(sdchm(p,r1,r2,r3),k,r) .
close

--> 5. sdrem(p,r1,r2,r3)
open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq r = r(m1) .
  eq dst(m1) = intruder .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq r = r(m1) .
  eq (dst(m1) = intruder) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq (r = r(m1)) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = true .
  eq r1 = dst(m1) .
  eq (k = k(dst(m1))) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = true .
  eq (r1 = dst(m1)) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = true .
  eq m1 \in nw(p) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close

open IFF .
  :id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op p : -> Protocol .
  op k : -> Key .
  op r : -> Rand .
  eq chm?(m1) = false .
  red inv2(p,k,r) implies inv2(sdrem(p,r1,m1),k,r) .
close